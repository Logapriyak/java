JAVA :
1.Java is a class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible.
2.It is intended to let application developers Write Once and Run Anywhere (WORA), meaning that compiled Java code can run on all platforms that support Java without the need for recompilation.
3.Java is known for its simplicity, robustness, and security features, making it a popular choice for enterprise-level applications.
4.Java was designed with core principles: simplicity, robustness, security, high performance, portability, multi-threading, and dynamic interpretation. 

Java  LST:
Definition & Purpose:
1.LTS (Long-Term Support) versions receive security updates, bug fixes, and patches for years.
2.Regular releases are only supported for six months.
3.Regular versions get new features but lack long-term support.
4.LTS versions eventually integrate these features while maintaining stability.

Why Use Java LTS?
Ecosystem Stability: Libraries, tools, and frameworks focus support on LTS versions.
Reliability: LTS versions are ideal for production use due to long-term stability.

Essential Java Terminologies:
1.Java Virtual Machine (JVM) – Executes Java bytecode, ensuring platform independence.
2.Bytecode – Intermediate, platform-independent code generated by the Java compiler.
3.Java Development Kit (JDK) – Includes compiler, JRE, debugger, and development tools.
4.Java Runtime Environment (JRE) – Runs Java programs but does not include a compiler.
5.Garbage Collector – Manages memory by automatically reclaiming unreferenced objects.
6.ClassPath – Specifies locations where the Java compiler and runtime look for .class files.
7.Class-Based – Everything in Java, including the main function, is defined within a class.

